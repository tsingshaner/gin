{{/* Go Template */}}// Code generated by github.com/tsingshaner/gin/gen. DO NOT EDIT.
package handler

import (
	"context"

	"github.com/gin-gonic/gin"
	"github.com/tsingshaner/gin/shared"
	"github.com/tsingshaner/go-pkg/log/console"
	"github.com/tsingshaner/go-pkg/util/hook"
)

type (
	handler struct {
		*Provider
	}

	Chain = gin.HandlersChain
	Ctx   = *gin.Context
	HF    = gin.HandlerFunc
)

var _ interface {
	{{- range .Guards}}
	{{.}}() HF
	{{- end}}
	{{ range .Chains}}
	{{.}}() Chain
	{{- end}}
} = &handler{}

var lifeCircle = hook.NewSimpleLifecycle[*handler]()

func New(ctx context.Context, p *Provider) shared.Handler {
	h := &handler{p}

	if err := lifeCircle.Run(ctx, h); err != nil {
		console.Fatal("handler init failed %w", err)
	}

	return h
}

{{- define "router" -}}

	{{ .RouterName }} := {{ .ParentRouterName }}.Group("{{ .Path }}"{{ range .Guards }}, h.{{ . }}(){{ end }})
	{{- range .Handlers }}
	{{ $.RouterName }}.{{ .Method }}("", h.{{ .Name }}()...)
	{{- end }}
	{{ range .Child }}
	{{ template "router" . }}
	{{- end }}
{{- end }}

func (h *handler) RegisterRoutes(r *gin.RouterGroup) {
	{{- range .Api}}
	{{ template "router" . }}
	{{- end }}
}
